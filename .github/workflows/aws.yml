# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy it to Amazon EKS (Kubernetes), when there is a push to the "main" branch.
#
# Prerequisites:
# - ECR repository created
# - EKS cluster created
# - Kubernetes manifests in k8s/ directory (see sample below)
# - AWS credentials in GitHub secrets

name: CI/CD to Amazon ECR & EKS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: eu-central-1                  # e.g. us-west-1
  ECR_REPOSITORY: my-app-repo           # your ECR repo name
  EKS_CLUSTER_NAME: my-cluster       # your EKS cluster name
  K8S_MANIFESTS: k8s/deployment.yaml          # path to your k8s manifests

permissions:
  contents: read

jobs:
  deploy:
    name: Build, Push to ECR, Deploy to EKS
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update Kubernetes manifests with new image
      id: update-manifests
      run: |
        sed -i "s|IMAGE_PLACEHOLDER|${{ steps.build-image.outputs.image }}|g" ${{ env.K8S_MANIFESTS }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Update kubeconfig for Amazon EKS
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Deploy to Amazon EKS
      run: |
        kubectl apply -f ${{ env.K8S_MANIFESTS }}
